/*****************************************************************************************************************
 *
 *    sqlcon system configuration file
 *
 ****************************************************************************************************************/
//### editor: application to open log fie and output file
	editor = "notepad.exe";

//### input/output file name, 
	directory = MyDocuments;
  	   output = format(@"{0}\output\sqlconn{1}.sql", directory, DateTime.Now.ToString("yyyyMMdd_hhmmss"));	
	      log = format(@"{0}\logs\sqlcon{1}.log", directory, DateTime.Now.ToString("yyyyMMdd_hhmmss"));	
	    xmldb = format(@"{0}\db", directory);	

//### table editor setting
    //color can be color string or hexadecimal color code "#AARRGGBB", for instance, "#FF9BD79B"
	gui.table.editor = {
		AlternatingRowBackground : "DimGray",  
		Foreground : "LightGray",
		RowBackground : "Black"
	};

//### sql editor setting
    //color can be color string or hexadecimal color code "#AARRGGBB", for instance, "#FF9BD79B"
	gui.sql.editor = {
		Foreground : "White",
		Background : "Black"
	};
	
	gui.sql.result.table = {
	    Foreground : "White", 
		Background : "Black",
		AlternatingRowBackground : "DimGray",  
		RowBackground : "Black"
	};
	
	gui.sql.result.message = {
		Foreground : "White",
		Background : "Black"
	};


//### dpo class
   dpo = {
		path : directory + @"\DataModel\Dpo",			// place to generate classes
		ns : "Sys.DataModel.Dpo",						// name space
		suffix : "Dpo",									// class name suffix
		level : 2,										// {0:Fixed, 1:System, 2:Application}
		HasProvider : false,							// data base provider
		hasTableAttr : true,							// create Table Attribute or not
		hasColumnAttr : true,							// create Column Attribute or not
		IsPack : true,
		rule : function(name) { return name;}
 };

//### data contract class
   dc.path = directory + @"\DataModel\DataContracts";	//place to generate classes
   dc.ns = "Sys.DataModel.DataContracts";				//name space
   dc.class = "DataContract";							//class name

//### Linq to SQL class
   l2s.path = directory + @"\DataModel\L2s";			//place to generate classes
   l2s.ns = "Sys.DataModel.L2s";						//name space

//### data enum class
   de.path = directory + @"\DataModel\DataEnum";		//place to generate classes
   de.ns = "Sys.DataModel.DataEnum";

//### csv 
   csv.path = directory + @"\csv";						//place to generate csv files


//### sql server connection-string library
	servers= {
			//local		: @"data source=localhost\sqlexpress;initial catalog=master;integrated security=SSPI;packet size=4096",
			//xml		: format("provider=xmlfile;data source=file://{0};initial catalog=xml;User Id=;Password=",schema),	

		//###　search connection string in web.config and app.config files 
			//web		: config(@"C:\inetpub\wwwroot\Web.config", "appSettings|key=connectionName", "value"),					//defined on the <appSettings/>
			//app		: config(@"C:\bin\medsys.exe.config", "connectionStrings|name=connectionName", "connectionString"),		//defined on the <connectionStrings/>
			//ws		: cfg(@"C:\inetpub\wwwroot\Web.cfg", "defaultconnection"),
	};

//### the default sql server, ~ is initial catalog defined on the connection string	
    //home = "\\local\\~";

	
//### limitation
	limit = 
	{
		top : 1000,	//number of row returned on command [type]
		export_max_count : 2000
	};

    
//### compare the following table data only
	//compare_included_tables = ["Territories*", "Region"];

//### export the following table only
	//export_included_tables = ["Territories", "Regi?n"];

//### applied when table has no primary key 
	primary_key= {
		TableEx1		: ["ID", "DIRECTION"],
		TableEx2		: ["ID"]
	};


//### key-value table, column [key] is primary key
	//dictionarytables = [ { table: "Config", key: "Key",  value: "Value"} ];


//### include configuration file
	//include("file://c:\\demos\\user.txt");
	//include("http://www.datconn.com/demos/user.txt");
	//include("ftp://username:pwd@ftp.datconn.com:21/demo/user.txt");

/*****************************************************************************************************************
 *    end of configuration file
 ****************************************************************************************************************/
